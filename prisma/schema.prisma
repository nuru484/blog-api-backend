// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String    @unique
  password     String
  Post         Post[]
  Comment      Comment[]
  Like         Like[]
  role         Role      @default(USER)
  refreshToken String?   @unique
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String    @db.VarChar(255)
  content   String
  published Boolean   @default(false)
  author    User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  comments  Comment[]
  views     View[]
  likes     Like[]
  tags      Tag[]     @relation("PostTags")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int?
  guestName String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model View {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int      @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int     @id @default(autoincrement())
  postId    Int
  userId    Int?
  guestName String?
  User      User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([postId, userId, guestName])
}

enum Role {
  USER
  ADMIN
}
